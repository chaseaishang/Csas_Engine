//用4倍抗锯齿的话，每个pixel里面会有4个fragment

//transform矩阵很少在GLSL中完成，通常是用GLM在C++代码中算好矩阵, send it to GLSL, 在GLSL里只做multiplication乘法。
//CPU擅长做通用计算。GPU是并行的，GPU对矩阵乘法是优化过的，矩阵乘法都要放在shader里（主要是vertex shader，对每个vertex apply）。

//GLM如何定义各种矩阵，以及做各种tranformation
https://learnopengl.com/Getting-started/Transformations

// 三大转换矩阵 1. Model matrix: Model Space (local) -> World Space (global)
Model_matrix = TranslationMatrix * RotationMatrix * ScaleMatrix;
TransformedVector = Model_matrix * OriginalVector;  // Model Space (local) -> World Space (global)

// 2. View matrix: World Space -> Camera Space
glm::mat4 CameraMatrix = glm::lookAt(
    cameraPosition, // the position of your camera, in world space
    cameraTarget,   // where you want to look at, in world space
    upVector        // probably glm::vec3(0,1,0)
);

// 3. Projection matrix: Camera Space -> Homogeneous Space (the viewing cube, range (-1, 1) in all xyz axes).
// 乘以这个矩阵后，实质上是把所有可见的物体变成相机frustum的形状，而把相机frustum变成我们的viewing cube立方体。
glm::mat4 projectionMatrix = glm::perspective(
    glm::radians(FoV), // The vertical Field of View, in radians
    4.0f / 3.0f,       // Aspect Ratio. Depends on the size of your window. usually 16:9
    0.1f,              // Near clipping plane. Keep as big as possible, or you'll get precision issues.
    100.0f             // Far clipping plane. Keep as little as possible.
);

// 三大矩阵组合起来成为一个大矩阵：the ModelViewProjection matrix，简称MVP矩阵。
glm::mat4 MVP = P * V * M;                  // compute the matrix in C++
transformed_vertex = MVP * in_vertex;       // apply it in GLSL

// step 1. compute the MVP matrix in C++, send it to GLSL
GLuint MVP_uid = glGetUniformLocation(PO, "MVP");  // query location (ONLY ONCE in Init())

glm::mat4 P = glm::perspective(glm::radians(45.0f), (float) width / (float)height, 0.1f, 100.0f);
glm::mat4 P = glm::ortho(-10.0f,10.0f,-10.0f,10.0f,0.0f,100.0f); // In world coordinates
glm::mat4 V = glm::lookAt(
    glm::vec3(4,3,3), // Camera is at (4,3,3), in World Space
    glm::vec3(0,0,0), // and looks at the origin
    glm::vec3(0,1,0)  // Head is up (set to 0,-1,0 to look upside-down)
);
glm::mat4 M = glm::mat4(1.0f);  // Model matrix : an identity matrix (model will be at the origin)
glm::mat4 MVP = P * V * M; // 乘的顺序是反过来的

glUniformMatrix4fv(MVP_uid, 1, GL_FALSE, &MVP[0][0]);  // set the MVP uniform (EVERY FRAME! each model has a different MVP)

// step 2. apply MVP in GLSL
layout(location = 0) in vec3 position;
uniform mat4 MVP;
void main() {
    gl_Position =  MVP * vec4(position, 1.0f);
}

// 经过shader后，GPU硬件中的厂商的OpenGL代码会自动计算"divide by W"的步骤

// VAO是一个用于管理VBO和IBO的对象，VAO中存储着：哪个VBO绑定了什么数据，对应的IBO是什么，等等之类的信息。
// 一个程序至少要有一个VAO，一个VAO可以管理多个VBOIBO。也可以有多个VAO，用于管理不同的要draw的物体。
// 如果只有一个VAO，但是要画多个物体，那么每次draw call之前，都要手动的绑定VBO，设置vertex的attributes，因为每个物体的VBO数据不一样，或是时刻在变化的。当然了，也可以每个物体都有一个单独的VAO，这个VAO包含了draw该物体需要知道的所有VBO,IBO的信息，都是绑定好了的，那么每次draw一个物体前，就只需要把OpenGL状态机的状态bind到这个VAO上就好了，这也是OpenGL推荐的做法。不过，performance上哪种更快没有定论，要根据自己的生产环境去benchmark，profile测试一下性能。不考虑性能的情况下，用多个VAO来管理程序会显得更方便。
glBindVertexArray(VAO);  // 下面的代码的所有bind都会被关联记录到这个VAO中，until这个VAO被解绑为止
//如果只有一个VAO，又有多个draw的物体或者物体VBO是动态的，那么每次draw call前都要加上下面这三行，放在display callback里。
glBindBuffer(GL_ARRAY_BUFFER, VBO);
glEnableVertexAttribArray(0);  // 这里0其实是VAO array中的一个指针
glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, 0, 0);  //这里是告诉VBO我的数据的layout是怎样的，但实际上信息是绑到VAO里的

/* 有时候，你可能会遇到一个OpenGL程序根本没有shader，没有VAOVBO，而且有一堆下面这种神秘代码，不要去理会，这是上世纪90年代的写法。
   这些都是legacy OpenGL的东西，定义了一堆built-in的MVP矩阵，你可以去load然后transform它们之类的，还有几个default的shader在后台运行。这些历史方法，本来的初衷是为了简化程序，造了一堆默认的东西，为了让程序员不用写shader不做空间变换不定义VAO、VBO也能简单的画图，并配合最原始的glVertex等方法使用，但是它们性能很烂，而且自由度很小，只能完成最基础的需求。OpenGL4开始，这些方法早就deprecated了，被淘汰许多年了。
   现代的OpenGL，没有人会用glVertex去一个点一个点的画，再画一堆原始的primitive，这样很蠢。现代的做法，都是要把vertices数据提前准备好，cache在程序里，然后再定义VAO,VBO,IBO，再用glDrawArray()和glDrawElements()这些方法去批量的画图。并且，程序员要自己手动处理MVP矩阵的变换，更加灵活。当然，自己写shader也是必不可少的，一个程序必须要至少有vs和fs两个shader，而不是去用legacy自带的shader。MVP变换本来就是vertex shader要做的事情。
*/
glMatrixMode(GL_PROJECTION);  // activate the built-in projection matrix to modify it
glLoadIdentity();  // clean out any old leftover matrices
gluPerspective(90.0, 800/600, 0.01, 100.0);
glTranslatef(0,0,-2.0);
glMultMatrixf(&viewMatrix[0][0]);
glMatrixMode(GL_MODELVIEW);  // activate the built-in model-view matrix to modify it
glLoadIdentity();
gluLookAt(1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
glPushMatrix();  // save coordinate system
glPopMatrix();   // restore/load coordinate system
...

/*
频幕上最终能看到的vertex全都是在Normalized Device Coordinates (NDC)空间里的，俗称NDC space。它就是xyz三个轴都在[-1,1]之间的一个立方体范围。
vertex shader的最终输出的gl_Position，就是把所有vertex的position转换到NDC空间。
NDC以外的vertex会被clip丢弃掉。
被转换到NDC空间的点，然后会通过glViewport转换为屏幕上的screen-space的点，这些点是最终我们看到的，也是fragment shader的input。

绑着VAO的时候，接下来开始设置VBO和IBO的各种layout，VBO设置好了以后，是可以安全的unbind的，但其实不需要，而IBO设置好了以后，千万不要在解绑VAO之前就unbind，否则刚刚的IBO就白设置了，VAO会抹掉之前的设置信息。
总之统一一下，绑着VAO的时候，再开始绑VBO并设置各种attrib，再绑IBO，记住，VBO和IBO都不要做任何手动unbind的动作，设置完成后直接unbind VAO就好了，这样的话，VAO当中会完整的保存着VBO+IBO的设置信息，并且在VAO解绑的同时它会自动解绑VBO+IBO。最后，每次要draw的时候，就只要bind到对应的VAO就好了。
如果你只draw一个物体，或只有一个VAO的话，每次在display callback里画完了之后也不用glBindVertexArray(0)，多此一举。

对于GLSL shader，const变量是不会被不同的shader stages之间shared的，也就是说，你在vertex shader里定义一个const变量，不会被fragment shader看到，哪怕你在fragment shader定义了一个一模一样的同名变量，那也是另一个变量。
而uniform是会被不同的shader stage之间共享的，假如你在vs和fs中都定义了一个同名的uniform变量，当vs和fs被link起来编译成一个program object的时候，这个program里只会有一个该uniform，换句话说，如果vs中定义了一个uniform A，fs中又定义了一个uniform也叫A，类型声明完全相同，这两个A实际上是同一个uniform变量，所以你只需要在opengl代码中从PO里面query一次这个uniform的location，不用query两次，也只需要给它赋值一次，不用赋两次，你赋值的时候，vs和fs都会同时接收到这个值。当然，现实中你一般不会这么做，既然uniform是global的，那么你只需要在用到这个uniform的shader里定义一次就好了，而不用在vs和fs里各定义一次，再从vs传到fs什么的。
但是，千万要注意，当你的程序里有多个PO，也就是有多个不同的shader program，这些program之间是完全独立的，他们里面的任何同名变量都不会被share，所以你在query location和赋值的时候，要对每个PO都分别操作一次。
尤其要注意的是，假如你定义了一个没有被shader程序用到的uniform，那么GLSL编译器会自动remove这个变量，于是你用glGetUniformLocation去query它的时候，结果会返回-1（但并不是报错），然后程序正常运行却显示黑屏，很难debug。

关于texture，FS里的sampler2D，samplerCube...等uniform，他们的location专门有个名称，叫做texture unit。
一般来说default都是texture unit 0，并且是默认开启的，我们并不需要显式地query这个uniform的location再用glUniform1i给它赋值我们的texture，当调用glBindTexture的时候，这是自动完成的。但有的显卡可能没有default，所以unit 0通道不存在，这时候就必须要手动glUniform1i去赋值，否则黑屏。所以稳妥起见，每次都自己手动赋值比较清晰。

OpenGL至少会有16个通道，16个texture units。我们可以叠加或使用多个texture，先activate一个通道，然后去bind texture，就会自动bind到那个通道。
glActiveTexture(GL_TEXTURE0); // activate the texture unit first before binding texture
glBindTexture(GL_TEXTURE_2D, texture);


layout (std140) uniform ExampleBlock
{
                     // 基准对齐量       // 对齐偏移量
    float value;     // 4               // 0
    vec3 vector;     // 16              // 16  (必须是16的倍数，所以 4->16)
    mat4 matrix;     // 16              // 32  (列 0)
                     // 16              // 48  (列 1)
                     // 16              // 64  (列 2)
                     // 16              // 80  (列 3)
    float values[3]; // 16              // 96  (values[0])
                     // 16              // 112 (values[1])
                     // 16              // 128 (values[2])
    bool boolean;    // 4               // 144
    int integer;     // 4               // 148
};
layout(std140) uniform test
{           // 基准对齐量       // 对齐偏移量
    float a;//   4                 0
    float b;//   4                 4
    vec3 f; //   16                16
    float s;//   4                 28
};
layout(std140) uniform test {
            // 基准对齐量       // 对齐偏移量
    float a;//   4                  0
    float b;//   4                   4
    vec3 f; //  16                  16
    vec3 s; //  16                  32
};




















// add this mode when you are working with the Mesh chapter
glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);  // draw wireframe
glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
改每个project的名字，和window title保持一致，否则不知道哪个是哪个，别管美丑，名字长无所谓
// 在mouse callback里，最后的一个项目把menu加进去，放些界面控制按钮，加上fps计数，成品















*/
针对 OpengGL 的书籍：

    《OpenGL SuperBible》，著名的蓝宝书，以例子为主，有中文版。但不建议看中文版，翻译得不好。
    《OpenGL Programming Guide》，著名的红宝书，有中文版。红宝书更像是手册，API大全，例子较少，适合熟练者查询使用。
    《OpenGL 4.0 Shading Language Cookbook》，进阶，基本上就是API手册，有中文版。但不建议看中文版，翻译得不好。

3) 计算机图形学

    《The Nature of Code》，有中文版，比较简单
    《Fundamentals of Computer Graphics》，被国外多所大学采用的入门教材，介绍范围比较广，从基本的相关数学到建模、渲染、动画、应用方面都有提及《
    Physically Based Rendering》，主要是离线渲染《Real-Time-Rendering》，必读经典！必读！
    《计算机图形学》，作者舍利
    《Computer Graphics》，要看最新的第三版
    《计算机图形学原理及实践：C语言描述》
    4) Shader着色器

        《Cg_tutorial》，入门
        《The Complete Effect and HLSL Guide》，入门
        《Shaders for Game Programmers and Artists》，含有大量入门例子
        《Advanced Lighting And Materials With Shaders》，介绍光照模型和技术
        《GPU Gems》进阶必读。
        《Shader X》系列，每年出版一本，包含最新的实时渲染技术。论文性的比较多，偏难。
        《Programming Vertex, Geometry, and Pixel Shaders》，以DirectX 10为主，很详细。

    5) 地形

    《Real Time 3D Terrain Engines Using C++ And DX9》非常全面的讨论了关于地形渲染的各种技术。
    6) 模型导入和动画

        《Character Animation With Direct3D》包含了最新的游戏动画技术《Computer Animation》《Real-Time Cameras》《Computer Facial Animation》《Realtime 3D Character Animation with Visual C++》《Advanced Animation and Rendering Techniques》《Cloth Modeling and Animation》

// 争取把opengl官方tutorial都过一遍，然后加上GLDebugMessageCallback
// 然后把CSC461的东西加进来，还有antongerdelan的教程（比较简单）
// 中途一边把cherno的opengl视频概念全都看一遍

// paroj的那个教程是讲底层的，实际上不需要自己手动做那么多事，读一下看看概念就可以了

// alili的作业然后再做
// 所有opengl的东西，这个repo，争取赶在春假结束前全部搞定，然后做mana oasis

// 后面别折腾opengl，有时间都去留给GLSL，写shader




//end
CSAS_PROFILE_FUNCTION();

        // Note: Switch this to true to enable dockspace
        static bool dockspaceOpen = true;
        static bool opt_fullscreen_persistant = true;
        bool opt_fullscreen = opt_fullscreen_persistant;
        static ImGuiDockNodeFlags dockspace_flags = ImGuiDockNodeFlags_None;

        // We are using the ImGuiWindowFlags_NoDocking flag to make the parent window not dockable into,
        // because it would be confusing to have two docking targets within each others.
        ImGuiWindowFlags window_flags = ImGuiWindowFlags_MenuBar | ImGuiWindowFlags_NoDocking;
        if (opt_fullscreen)
        {
            ImGuiViewport* viewport = ImGui::GetMainViewport();
            ImGui::SetNextWindowPos(viewport->Pos);
            ImGui::SetNextWindowSize(viewport->Size);
            ImGui::SetNextWindowViewport(viewport->ID);
            ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
            ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 0.0f);
            window_flags |= ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoMove;
            window_flags |= ImGuiWindowFlags_NoBringToFrontOnFocus | ImGuiWindowFlags_NoNavFocus;
        }

        // When using ImGuiDockNodeFlags_PassthruCentralNode, DockSpace() will render our background and handle the pass-thru hole, so we ask Begin() to not render a background.
        if (dockspace_flags & ImGuiDockNodeFlags_PassthruCentralNode)
            window_flags |= ImGuiWindowFlags_NoBackground;

        // Important: note that we proceed even if Begin() returns false (aka window is collapsed).
        // This is because we want to keep our DockSpace() active. If a DockSpace() is inactive,
        // all active windows docked into it will lose their parent and become undocked.
        // We cannot preserve the docking relationship between an active window and an inactive docking, otherwise
        // any change of dockspace/settings would lead to windows being stuck in limbo and never being visible.
        ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0.0f, 0.0f));
        ImGui::Begin("DockSpace Demo", &dockspaceOpen, window_flags);
        ImGui::PopStyleVar();

        if (opt_fullscreen)
            ImGui::PopStyleVar(2);

        // DockSpace
        ImGuiIO& io = ImGui::GetIO();
        if (io.ConfigFlags & ImGuiConfigFlags_DockingEnable)
        {
            ImGuiID dockspace_id = ImGui::GetID("MyDockSpace");
            ImGui::DockSpace(dockspace_id, ImVec2(0.0f, 0.0f), dockspace_flags);
        }

        if (ImGui::BeginMenuBar())
        {
            if (ImGui::BeginMenu("File"))
            {
                // Disabling fullscreen would allow the window to be moved to the front of other windows,
                // which we can't undo at the moment without finer window depth/z control.
                //ImGui::MenuItem("Fullscreen", NULL, &opt_fullscreen_persistant);

                if (ImGui::MenuItem("Exit")) Application::Get().Close();
                ImGui::EndMenu();
            }

            ImGui::EndMenuBar();
        }
        m_SceneHierarchyPanel.OnImGuiRender();
        ImGui::Begin("Stats");

        auto stats = Renderer3D::GetStats();
        ImGui::Text("Renderer3D Stats:");
        ImGui::Text("Draw Calls: %d", stats.DrawCalls);
        ImGui::Text("Quads: %d", stats.CubeCount);
        ImGui::Text("Vertices: %d", stats.GetTotalVertexCount());
        ImGui::Text("Indices: %d", stats.GetTotalIndexCount());
        ImGui::Separator();
        ImGui::Text("Time ave %.3f ms/frame",1000.0f / ImGui::GetIO().Framerate);
        ImGui::Text("(%.1f FPS)",ImGui::GetIO().Framerate);
        ImGui::Separator();
        ImGui::Text("%.5f",stats.z);

        ImGui::End();

        ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2{ 0, 0 });
        ImGui::Begin("Viewport");

        m_ViewportFocused = ImGui::IsWindowFocused();
        m_ViewportHovered = ImGui::IsWindowHovered();
        Application::Get().GetImGuiLayer()->BlockEvents(!m_ViewportFocused || !m_ViewportHovered);

        ImVec2 viewportPanelSize = ImGui::GetContentRegionAvail();
        m_ViewportSize = { viewportPanelSize.x, viewportPanelSize.y };
        uint64_t textureID = m_Framebuffer->GetColorAttachmentRendererID();
        ImGui::Image(reinterpret_cast<void*>(textureID), ImVec2{ m_ViewportSize.x, m_ViewportSize.y }, ImVec2{ 0, 1 }, ImVec2{ 1, 0 });
        ImGui::End();
        ImGui::PopStyleVar();

        ImGui::End();